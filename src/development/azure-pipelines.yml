trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'your-docker-registry-service-connection'
  imageRepository: 'accountapi'
  dockerfilePath: '$(Build.SourcesDirectory)/.docker/Dockerfile'
  tag: '$(Build.BuildId)'
  sonarQubeServiceConnection: 'your-sonarqube-service-connection'
  sonarQubeOrganization: 'your-sonarqube-organization'
  sonarQubeProjectKey: 'your-sonarqube-project-key'

stages:
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: SonarQubePrepare@5
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQubeServiceEndpoint: '$(sonarQubeServiceConnection)'
        organization: '$(sonarQubeOrganization)'
        projectKey: '$(sonarQubeProjectKey)'
        projectName: 'AccountAPI'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        tags: | 
          $(tag)

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubePublish@5
      displayName: 'Publish SonarQube Results'
      inputs:
        pollingTimeoutSec: '300'

- stage: TestUnit
  displayName: Run Unit Tests
  jobs:
  - job: TestUnit
    displayName: Run Unit Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.x'
      inputs:
        version: '8.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Unit Test Project'
      inputs:
        command: 'build'
        projects: 'src/development/.webapi.tests.unit/AccountAPI.Tests.Unit.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: 'src/development/.webapi.tests.unit/AccountAPI.Tests.Unit.csproj'
        arguments: '--configuration Release --logger trx'
        publishTestResults: true
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/*.trx'

- stage: Test
  displayName: Run Tests
  jobs:
  - job: Test
    displayName: Run Unit Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.x'
      inputs:
        version: '8.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Test Project'
      inputs:
        command: 'build'
        projects: '.webapi.tests.t1/AccountAPI.Tests.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '.webapi.tests.t1/AccountAPI.Tests.csproj'
        arguments: '--configuration Release --logger trx'
        publishTestResults: true
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/*.trx'

- stage: TestT2
  displayName: Run T2 Tests
  jobs:
  - job: TestT2
    displayName: Run T2 Integration Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.x'
      inputs:
        version: '8.x'

    - script: |
        docker ps -q --filter ancestor=whoami-webapi | xargs -r docker stop
        docker ps -aq --filter ancestor=whoami-webapi | xargs -r docker rm
      displayName: 'Stop and Remove existing Docker containers'

    - script: |
        docker run -d -p 8081:8080 -e ASPNETCORE_ENVIRONMENT=Development whoami-webapi
      displayName: 'Start WebAPI Docker Container'

    - task: DotNetCoreCLI@2
      displayName: 'Restore T2 NuGet packages'
      inputs:
        command: 'restore'
        projects: '.webapi.tests.t2/AccountAPI.Tests.T2.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build T2 Test Project'
      inputs:
        command: 'build'
        projects: '.webapi.tests.t2/AccountAPI.Tests.T2.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run T2 Tests'
      inputs:
        command: 'test'
        projects: '.webapi.tests.t2/AccountAPI.Tests.T2.csproj'
        arguments: '--configuration Release --logger trx'
        publishTestResults: true
        testResultsFormat: 'xUnit'
        testResultsFiles: '**/*.trx'

    - script: |
        docker ps -q --filter ancestor=whoami-webapi | xargs -r docker stop
        docker ps -aq --filter ancestor=whoami-webapi | xargs -r docker rm
      displayName: 'Stop and Remove Docker container after tests'
      condition: always() # Ensure this runs even if previous steps fail

- stage: TestT3
  displayName: Run T3 Performance Tests
  jobs:
  - job: TestT3
    displayName: Run T3 Performance Tests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.x'
      inputs:
        version: '8.x'

    - script: |
        docker ps -q --filter ancestor=whoami-webapi | xargs -r docker stop
        docker ps -aq --filter ancestor=whoami-webapi | xargs -r docker rm
      displayName: 'Stop and Remove existing Docker containers'

    - task: DotNetCoreCLI@2
      displayName: 'Restore T3 NuGet packages'
      inputs:
        command: 'restore'
        projects: 'src/development/.webapi.tests.t3/AccountAPI.Tests.T3.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build T3 Test Project'
      inputs:
        command: 'build'
        projects: 'src/development/.webapi.tests.t3/AccountAPI.Tests.T3.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run T3 Tests'
      inputs:
        command: 'run' # Use 'run' for NBomber tests
        projects: 'src/development/.webapi.tests.t3/AccountAPI.Tests.T3.csproj'
        arguments: '--configuration Release'

    - script: |
        docker ps -q --filter ancestor=whoami-webapi | xargs -r docker stop
        docker ps -aq --filter ancestor=whoami-webapi | xargs -r docker rm
      displayName: 'Stop and Remove Docker container after tests'
      condition: always() # Ensure this runs even if previous steps fail
